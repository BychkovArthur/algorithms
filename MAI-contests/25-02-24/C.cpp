#include <bits/stdc++.h>

#define all(x) (x).begin(), (x).end()

using namespace std;

using ll = int64_t;
using ull = uint64_t;
using vi = vector<int>;
using vll = vector<ll>;
using pii = pair<int, int>;
using pll = pair<ll, ll>;

template <typename _Key, typename _Tp>
using umap = unordered_map<_Key, _Tp>;
template <typename _Value>
using uset = unordered_set<_Value>;


// vector<int> a = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
//                  2, 2, 2, 2, 2, 2, 2,
//                  3, 3, 3, 3, 3,
//                  4, 4, 4,
//                  5, 5, 5,
//                  6, 6,
//                  7, 7,
//                  8,
//                  9,
//                  10};

// vector<int> b = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

// size_t N = b.size();




// void getCombos() {

//     int sum = 0;

//     for (int x1 = 0; x1 < 11; ++x1) {
//     for (int x2 = 0; x2 < 11; ++x2) {
//     for (int x3 = 0; x3 < 11; ++x3) {
//     for (int x4 = 0; x4 < 11; ++x4) {
//     for (int x5 = 0; x5 < 11; ++x5) {
//     for (int x6 = 0; x6 < 11; ++x6) {
//     for (int x7 = 0; x7 < 11; ++x7) {
//     for (int x8 = 0; x8 < 11; ++x8) {
//     for (int x9 = 0; x9 < 11; ++x9) {
//     for (int x10 = 0; x10 < 11; ++x10) {
//     for (int x11 = 0; x11 < 11; ++x11) {
//     for (int x12 = 0; x12 < 11; ++x12) {
//     for (int x13 = 0; x13 < 11; ++x13) {
//     for (int x14 = 0; x14 < 11; ++x14) {
//     for (int x15 = 0; x15 < 11; ++x15) {

//         if (x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14 + x15 == 15) {
//             std::cout << " " << x1 << " " << x2 << " " << x3 << " " << x4 << " " << x5 << " " << x6 << " " << x7 << " " << x8 << " " << x9 << " " << x10 << " " << x11 << " " << x12 << " " << x13 << " " << x14 << " " << x15 << std::endl;
//         }



//     }
//     }
//     }
//     }
//     }
//     }
//     }
//     }
//     }
//     }
//     }
//     }
//     }
//     }
//     }

// }

vector<vector<int>> IMBA = {
    {0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
    {0, 0, 0, 0, 0, 1, 0, 0, 1, 0},
    {0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
    {0, 0, 0, 0, 3, 0, 0, 0, 0, 0},
    {0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
    {0, 0, 0, 2, 0, 0, 1, 0, 0, 0},
    {0, 0, 1, 0, 0, 2, 0, 0, 0, 0},
    {0, 0, 1, 0, 1, 0, 1, 0, 0, 0},
    {0, 0, 1, 1, 0, 0, 0, 1, 0, 0},
    {0, 0, 1, 3, 0, 0, 0, 0, 0, 0},
    {0, 0, 2, 0, 0, 0, 0, 0, 1, 0},
    {0, 0, 2, 1, 1, 0, 0, 0, 0, 0},
    {0, 0, 3, 0, 0, 1, 0, 0, 0, 0},
    {0, 0, 5, 0, 0, 0, 0, 0, 0, 0},
    {0, 1, 0, 0, 0, 1, 1, 0, 0, 0},
    {0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
    {0, 1, 0, 1, 0, 0, 0, 0, 1, 0},
    {0, 1, 0, 2, 1, 0, 0, 0, 0, 0},
    {0, 1, 1, 0, 0, 0, 0, 0, 0, 1},
    {0, 1, 1, 0, 2, 0, 0, 0, 0, 0},
    {0, 1, 1, 1, 0, 1, 0, 0, 0, 0},
    {0, 1, 2, 0, 0, 0, 1, 0, 0, 0},
    {0, 1, 3, 1, 0, 0, 0, 0, 0, 0},
    {0, 2, 0, 0, 1, 1, 0, 0, 0, 0},
    {0, 2, 0, 1, 0, 0, 1, 0, 0, 0},
    {0, 2, 1, 0, 0, 0, 0, 1, 0, 0},
    {0, 2, 1, 2, 0, 0, 0, 0, 0, 0},
    {0, 2, 2, 0, 1, 0, 0, 0, 0, 0},
    {0, 3, 0, 0, 0, 0, 0, 0, 1, 0},
    {0, 3, 0, 1, 1, 0, 0, 0, 0, 0},
    {0, 3, 1, 0, 0, 1, 0, 0, 0, 0},
    {0, 3, 3, 0, 0, 0, 0, 0, 0, 0},
    {0, 4, 0, 0, 0, 0, 1, 0, 0, 0},
    {0, 4, 1, 1, 0, 0, 0, 0, 0, 0},
    {0, 5, 0, 0, 1, 0, 0, 0, 0, 0},
    {0, 6, 1, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 2, 0, 0, 0},
    {1, 0, 0, 0, 0, 1, 0, 1, 0, 0},
    {1, 0, 0, 0, 1, 0, 0, 0, 1, 0},
    {1, 0, 0, 1, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 2, 0, 0, 0, 0, 0},
    {1, 0, 0, 2, 0, 1, 0, 0, 0, 0},
    {1, 0, 1, 0, 1, 1, 0, 0, 0, 0},
    {1, 0, 1, 1, 0, 0, 1, 0, 0, 0},
    {1, 0, 2, 0, 0, 0, 0, 1, 0, 0},
    {1, 0, 2, 2, 0, 0, 0, 0, 0, 0},
    {1, 0, 3, 0, 1, 0, 0, 0, 0, 0},
    {1, 1, 0, 0, 0, 2, 0, 0, 0, 0},
    {1, 1, 0, 0, 1, 0, 1, 0, 0, 0},
    {1, 1, 0, 1, 0, 0, 0, 1, 0, 0},
    {1, 1, 0, 3, 0, 0, 0, 0, 0, 0},
    {1, 1, 1, 0, 0, 0, 0, 0, 1, 0},
    {1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
    {1, 1, 2, 0, 0, 1, 0, 0, 0, 0},
    {1, 1, 4, 0, 0, 0, 0, 0, 0, 0},
    {1, 2, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 2, 0, 0, 2, 0, 0, 0, 0, 0},
    {1, 2, 0, 1, 0, 1, 0, 0, 0, 0},
    {1, 2, 1, 0, 0, 0, 1, 0, 0, 0},
    {1, 2, 2, 1, 0, 0, 0, 0, 0, 0},
    {1, 3, 0, 0, 0, 0, 0, 1, 0, 0},
    {1, 3, 0, 2, 0, 0, 0, 0, 0, 0},
    {1, 3, 1, 0, 1, 0, 0, 0, 0, 0},
    {1, 4, 0, 0, 0, 1, 0, 0, 0, 0},
    {1, 4, 2, 0, 0, 0, 0, 0, 0, 0},
    {1, 5, 0, 1, 0, 0, 0, 0, 0, 0},
    {1, 7, 0, 0, 0, 0, 0, 0, 0, 0},
    {2, 0, 0, 0, 0, 1, 1, 0, 0, 0},
    {2, 0, 0, 0, 1, 0, 0, 1, 0, 0},
    {2, 0, 0, 1, 0, 0, 0, 0, 1, 0},
    {2, 0, 0, 2, 1, 0, 0, 0, 0, 0},
    {2, 0, 1, 0, 0, 0, 0, 0, 0, 1},
    {2, 0, 1, 0, 2, 0, 0, 0, 0, 0},
    {2, 0, 1, 1, 0, 1, 0, 0, 0, 0},
    {2, 0, 2, 0, 0, 0, 1, 0, 0, 0},
    {2, 0, 3, 1, 0, 0, 0, 0, 0, 0},
    {2, 1, 0, 0, 1, 1, 0, 0, 0, 0},
    {2, 1, 0, 1, 0, 0, 1, 0, 0, 0},
    {2, 1, 1, 0, 0, 0, 0, 1, 0, 0},
    {2, 1, 1, 2, 0, 0, 0, 0, 0, 0},
    {2, 1, 2, 0, 1, 0, 0, 0, 0, 0},
    {2, 2, 0, 0, 0, 0, 0, 0, 1, 0},
    {2, 2, 0, 1, 1, 0, 0, 0, 0, 0},
    {2, 2, 1, 0, 0, 1, 0, 0, 0, 0},
    {2, 2, 3, 0, 0, 0, 0, 0, 0, 0},
    {2, 3, 0, 0, 0, 0, 1, 0, 0, 0},
    {2, 3, 1, 1, 0, 0, 0, 0, 0, 0},
    {2, 4, 0, 0, 1, 0, 0, 0, 0, 0},
    {2, 5, 1, 0, 0, 0, 0, 0, 0, 0},
    {3, 0, 0, 0, 0, 2, 0, 0, 0, 0},
    {3, 0, 0, 0, 1, 0, 1, 0, 0, 0},
    {3, 0, 0, 1, 0, 0, 0, 1, 0, 0},
    {3, 0, 0, 3, 0, 0, 0, 0, 0, 0},
    {3, 0, 1, 0, 0, 0, 0, 0, 1, 0},
    {3, 0, 1, 1, 1, 0, 0, 0, 0, 0},
    {3, 0, 2, 0, 0, 1, 0, 0, 0, 0},
    {3, 0, 4, 0, 0, 0, 0, 0, 0, 0},
    {3, 1, 0, 0, 0, 0, 0, 0, 0, 1},
    {3, 1, 0, 0, 2, 0, 0, 0, 0, 0},
    {3, 1, 0, 1, 0, 1, 0, 0, 0, 0},
    {3, 1, 1, 0, 0, 0, 1, 0, 0, 0},
    {3, 1, 2, 1, 0, 0, 0, 0, 0, 0},
    {3, 2, 0, 0, 0, 0, 0, 1, 0, 0},
    {3, 2, 0, 2, 0, 0, 0, 0, 0, 0},
    {3, 2, 1, 0, 1, 0, 0, 0, 0, 0},
    {3, 3, 0, 0, 0, 1, 0, 0, 0, 0},
    {3, 3, 2, 0, 0, 0, 0, 0, 0, 0},
    {3, 4, 0, 1, 0, 0, 0, 0, 0, 0},
    {3, 6, 0, 0, 0, 0, 0, 0, 0, 0},
    {4, 0, 0, 0, 1, 1, 0, 0, 0, 0},
    {4, 0, 0, 1, 0, 0, 1, 0, 0, 0},
    {4, 0, 1, 0, 0, 0, 0, 1, 0, 0},
    {4, 0, 1, 2, 0, 0, 0, 0, 0, 0},
    {4, 0, 2, 0, 1, 0, 0, 0, 0, 0},
    {4, 1, 0, 0, 0, 0, 0, 0, 1, 0},
    {4, 1, 0, 1, 1, 0, 0, 0, 0, 0},
    {4, 1, 1, 0, 0, 1, 0, 0, 0, 0},
    {4, 1, 3, 0, 0, 0, 0, 0, 0, 0},
    {4, 2, 0, 0, 0, 0, 1, 0, 0, 0},
    {4, 2, 1, 1, 0, 0, 0, 0, 0, 0},
    {4, 3, 0, 0, 1, 0, 0, 0, 0, 0},
    {4, 4, 1, 0, 0, 0, 0, 0, 0, 0},
    {5, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {5, 0, 0, 0, 2, 0, 0, 0, 0, 0},
    {5, 0, 0, 1, 0, 1, 0, 0, 0, 0},
    {5, 0, 1, 0, 0, 0, 1, 0, 0, 0},
    {5, 0, 2, 1, 0, 0, 0, 0, 0, 0},
    {5, 1, 0, 0, 0, 0, 0, 1, 0, 0},
    {5, 1, 0, 2, 0, 0, 0, 0, 0, 0},
    {5, 1, 1, 0, 1, 0, 0, 0, 0, 0},
    {5, 2, 0, 0, 0, 1, 0, 0, 0, 0},
    {5, 2, 2, 0, 0, 0, 0, 0, 0, 0},
    {5, 3, 0, 1, 0, 0, 0, 0, 0, 0},
    {5, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {6, 0, 0, 0, 0, 0, 0, 0, 1, 0},
    {6, 0, 0, 1, 1, 0, 0, 0, 0, 0},
    {6, 0, 1, 0, 0, 1, 0, 0, 0, 0},
    {6, 0, 3, 0, 0, 0, 0, 0, 0, 0},
    {6, 1, 0, 0, 0, 0, 1, 0, 0, 0},
    {6, 1, 1, 1, 0, 0, 0, 0, 0, 0},
    {6, 2, 0, 0, 1, 0, 0, 0, 0, 0},
    {6, 3, 1, 0, 0, 0, 0, 0, 0, 0},
    {7, 0, 0, 0, 0, 0, 0, 1, 0, 0},
    {7, 0, 0, 2, 0, 0, 0, 0, 0, 0},
    {7, 0, 1, 0, 1, 0, 0, 0, 0, 0},
    {7, 1, 0, 0, 0, 1, 0, 0, 0, 0},
    {7, 1, 2, 0, 0, 0, 0, 0, 0, 0},
    {7, 2, 0, 1, 0, 0, 0, 0, 0, 0},
    {7, 4, 0, 0, 0, 0, 0, 0, 0, 0},
    {8, 0, 0, 0, 0, 0, 1, 0, 0, 0},
    {8, 0, 1, 1, 0, 0, 0, 0, 0, 0},
    {8, 1, 0, 0, 1, 0, 0, 0, 0, 0},
    {8, 2, 1, 0, 0, 0, 0, 0, 0, 0},
    {9, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    {9, 0, 2, 0, 0, 0, 0, 0, 0, 0},
    {9, 1, 0, 1, 0, 0, 0, 0, 0, 0},
    {9, 3, 0, 0, 0, 0, 0, 0, 0, 0},
    {10, 0, 0, 0, 1, 0, 0, 0, 0, 0},
    {10, 1, 1, 0, 0, 0, 0, 0, 0, 0},
    {11, 0, 0, 1, 0, 0, 0, 0, 0, 0},
    {11, 2, 0, 0, 0, 0, 0, 0, 0, 0},
    {12, 0, 1, 0, 0, 0, 0, 0, 0, 0},
    {13, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    {15, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

size_t facts[20] = {0};

void fill() {
    facts[0] = 1;
    facts[1] = 1;
    for (int i = 2; i < 20; ++i) {
        facts[i] = facts[i - 1] * i;
    }
}

size_t C(size_t n, size_t k) {
    if (n == k) {
        return 1;
    }
    size_t kf = facts[k];
    size_t val = 1;
    for (int i = n - k + 1; i <= n; ++i) {
        val *= i;
    }
    return val / kf;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    // std::cout << a.size() << std::endl;
    // getCombos();
    fill();
    int n;
    cin >> n;
    vector<int> a(10, 0);

    vector<int> rule_3(20, 0);
    for (int i = 0; i < n; ++i) {
        char c;
        int val;
        cin >> c;
        // cout << "char = " << c << endl;
        if ('2' <= c && c <= '9') {
            val = c - '0';

            rule_3[val - 1]++;
        } else if (c == 'A') {
            val = 1;

            rule_3[val - 1]++;
        } else {
            val = 10;

            if (c == 'T') {
                rule_3[9]++;
            }
            if (c == 'J') {
                rule_3[10]++;
            }
            if (c == 'Q') {
                rule_3[11]++;
            }
            if (c == 'K') {
                rule_3[12]++;
            }
        }
        a[val - 1]++;
    }

    size_t res = 0;

    // Второе условие
    for (int i = 0; i < 20; ++i) {
        if (rule_3[i] >= 2) {
            res += C(rule_3[i], 2) * 2;
        }
    }

    cout << "RES AFTER 2: " << res << endl;

    // Третье условие
    size_t sm = 0;
    size_t len = (rule_3[0] > 0);
    size_t multiply = len ? rule_3[0] : 1;
    for (int i = 1; i < 20; ++i) {
        if (rule_3[i] > 0) {
            ++len;
            multiply *= rule_3[i];
        } else {
            if (len >= 3) {
                sm += len * multiply;
            }
            len = 0;
            multiply = 1;
        }
    }

    cout << "rule" << endl;
    for (auto el : rule_3) {
        cout << el << " ";
    }
    cout << endl << "a" << endl;
    for (auto el : a) {
        cout << el << " ";
    }
    cout << endl;

    if (len >= 3) {
        sm += len * multiply;
    }
    res += sm;
    cout << "rule3 = " << sm << std::endl;

    // for (int i = 0; i < 20; ++i) {
    //     cout << facts[i] << " ";
    // }

    // cout << C(3, 2) << endl;
    // cout << C(100, 2) << endl;



    // Первое условие
    for (vector<int>& combos : IMBA) {
        bool is_good_combo = true;

        for (int i = 0; i < 10; ++i) {
            if (combos[i] > a[i]) {
                is_good_combo = false;
                break;
            }
        }

        if (is_good_combo) {
            size_t number_of_variants = 1;
            for (int i = 0; i < 10; ++i) {
                if (a[i] != 0) {
                    number_of_variants *= C(a[i], combos[i]);
                }
            }

            cout << "NUmb of vars: " << number_of_variants << std::endl;
            for (auto el : combos) {
                cout << el << " ";
            }
            cout << endl;

            res += number_of_variants * 2;
        }
    }

    cout << res << std::endl;

    return 0;
}