/*
    1) Если я шагаю большим указателем, то я гарантированно уменьшу объём, т.к.:
        1) Уменьшиться длина контейнера
        2) Высота контейнера либо останется такой же (если новая стена будет >=
        меньшей стены, которой мы не шагали), либо уменьшится.
        3) Получается, что одна величина строго уменьшается, другая уменьшается
        или отстаётся такой же => объём точно уменьшается.


    Т.е. шагать большей стеной не разумно, т.к. мы всегда будем уменьшать объём.


    Есть смысл шагать только меньшей стеной, т.к. у нас будет вероятность,
    что мы увеличим объём.

    Идея, что шагая меньшим мы на каждой итерации находим максимальный объём для
    определенной высоты не верна:
    \[20, 1, 30, 30]

    Если мы шагнём меньшей стеной, то получим объём равный 2.
    Если мы шагнём большей стеной, то получим объём равный 40.

*/


class Solution {
public:
    int maxArea(vector<int>& height) {
        int l = 0;
        int r = height.size() - 1;
        int res = 0;

        while (l < r) {
            res = max(min(height[l], height[r]) * (r - l), res);
            if (height[l] < height[r]) {
                ++l;
            } else {
                --r;
            }
        }
        return res;
    }
};